<?xml version="1.0" encoding="utf-8"?>
<topic id="6ac8c54b-c9fa-4085-80f9-b816430ae62d" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
      <para>
        Explains how to extend a standard transition with additional transition targets to create a fork transition in a <token>StaMaShapes</token> state diagram.
      </para>
    </summary>
    <introduction>
      <para>
        Fork transitions are transitions that target multiple states within different sub-regions of a composite state like <fictitiousUri>Figure 1</fictitiousUri>.
      </para>
      <mediaLink>
        <caption placement="after" lead="Figure 1">Fork transition</caption>
        <image placement="center" xlink:href="ForkTransition"/>
      </mediaLink>
      <para>
        Fork transitions are composed of the same shapes as two ended transitions and have two or more transition segment shapes that address the target states.
      </para>
      <para>
        The steps for creating a fork transition are similar to the steps for the two ended transitions in <link xlink:href="1b54bfbf-f269-4c50-8695-8ff430dee73b"/>.
      </para>
      <para>
        The following description assumes a simple state as the source state and a composite state with two sub-regions containing the target states.
        A description how to create a composite state with multiple sub-regions can be found in <link xlink:href="9110ef28-d0d9-40ac-a09d-2263809f5f45"/>.
      </para>
    </introduction>
    <procedure>
      <title>Creating the transition knot that defines the transition source state</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              In the <link xlink:href="a4db1100-01f4-4594-b23c-948cbd01b5e7">Document Stencil</link> locate the <ui>Transition Knot</ui> shape and drag it over the border of the intended source state in the state diagram.
            </para>
            <para>
              Drag the line end of the transition knot over the source state border until a small red rectangle appears on the source state.
              Drop the transition knot shape.
            </para>
            <mediaLink>
              <caption placement="after" lead="Figure 2">Drag transition knot over the source state border</caption>
              <image placement="center" xlink:href="ForkTransitionDraggingTransitionKnot"/>
            </mediaLink>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <para>
            Properties of the transition like the signal event, a guard condition, a transition action, the priority and a human readable identifier can be set as described in <link xlink:href="1b54bfbf-f269-4c50-8695-8ff430dee73b"/>.
          </para>
        </content>
      </conclusion>
    </procedure>
    <procedure>
      <title>Defining the first target state of the transition</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              In the <link xlink:href="a4db1100-01f4-4594-b23c-948cbd01b5e7">Document Stencil</link> locate the <ui>Transition Segment</ui> shape and drag it over the border of the intended target state in the state diagram.
            </para>
            <mediaLink>
              <caption placement="after" lead="Figure 3">Drag transition segment over the target state border</caption>
              <image placement="center" xlink:href="ForkTransitionDraggingTransitionSegmentA"/>
            </mediaLink>
            <para>
              Drag the line end of the transition segment with the arrow over the target state border until a small red rectangle appears on the source state.
              Drop the transition segment shape.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              When the transition segment is selected, it has a small yellow diamond at its dangling end.
              Drag the small yellow diamond over the center of the transition knot box until a small red rectangle appears.
            </para>
            <mediaLink>
              <caption placement="after" lead="Figure 4">Drag dangling transition segment end over transition knot box</caption>
              <image placement="center" xlink:href="ForkTransitionConnectingTransitionSegmentA"/>
            </mediaLink>
            <para>
              Drop (release the mouse button) to connect the dangling line end with the transition knot.
            </para>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <para>
            The transition segment may target nested states with any depth.
          </para>
        </content>
      </conclusion>
    </procedure>
    <procedure>
      <title>Defining the second target state of the transition</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Repeat the above steps for the second target state.
            </para>
            <para>
              The diagram should now look as in <fictitiousUri>Figure 5</fictitiousUri>.
            </para>
            <mediaLink>
              <caption placement="after" lead="Figure 5">Fork transition intermediate result after adding second target state.</caption>
              <image placement="center" xlink:href="ForkTransitionAddedAllSegmentTargets"/>
            </mediaLink>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
          <para>
            An arbitrary number of target states can be added this way. Consistency of the resulting state configuration will be checked at runtime of the generated state machine.
          </para>
        </content>
      </conclusion>
    </procedure>
    <procedure>
      <title>Improving the visual appearance of the transition</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Depending on the order of adding the transition knot and the transition segment they now have an unwanted graphical z-order which causes the
              transition segment to cross the transition knot box.
              By lifting the transition knot to the topmost graphical z-order, the transition knot box will cover the transition segment which looks much better.
            </para>
            <para>
              Open the context menu of the transition knot by right-clicking with the mouse on its line, not on the box.
              The context menu appears (and the two yellow diamonds).
            </para>
            <para>
              In the context menu select <ui>Bring to front</ui>. The part of the transition segment line that crosses the transition knot box disappears.
            </para>
            <mediaLink>
              <caption placement="after" lead="Figure 6">Bring transition knot shape to front</caption>
              <image placement="center" xlink:href="ForkTransitionTransitionKnotBringToFront"/>
            </mediaLink>
            <para>
              The diagram should now look as in <fictitiousUri>Figure 1</fictitiousUri>.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              The transition knot position, the transition knot connection line routing and transition segment line routing may be adapted as described in <link xlink:href="1b54bfbf-f269-4c50-8695-8ff430dee73b"/>.
              In order to further arrange the state diagram, the source or target state or the yellow diamond in the center of the transition knot box can be dragged and will not disconnect the transition.
            </para>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
        </content>
      </conclusion>
    </procedure>
    <procedure>
      <title>Checking the generated code</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              Add a <ui>Code Generator</ui> shape as described in <link xlink:href="2879867d-8e74-4dbd-861a-292bc54d505b"/> to the diagram.
            </para>
            <para>
              Generate the code into the <placeholder>target file</placeholder> e.g. by pressing <ui>Ctrl+G</ui>.
              Check that the transition has properly been generated, the <placeholder>target file</placeholder> should now contain a piece of code similar to following:
            </para>
            <code language="C#" title="ForkTransition.cs" >
              <![CDATA[
                t.Region(SimpleState, false);
                    t.State(CompositeState, null, null);
                        t.Region(StateInSubRegionA, false);
                            t.State(StateInSubRegionA, null, null);
                            t.EndState();
                        t.EndRegion();
                        t.Region(StateInSubRegionB, false);
                            t.State(StateInSubRegionB, null, null);
                            t.EndState();
                        t.EndRegion();
                    t.EndState();
                    t.State(SimpleState, null, null);
                        t.Transition(Transi11, new string[] {StateInSubRegionA, StateInSubRegionB}, Event, null, null);
                    t.EndState();
                t.EndRegion();
]]>
            </code>
          </content>
        </step>
      </steps>
      <conclusion>
        <content>
        </content>
      </conclusion>
    </procedure>
    <relatedTopics>
      <link xlink:href="7e6981a4-284a-4027-9e21-50d195fe0169"/>
    </relatedTopics>
  </developerHowToDocument>
</topic>