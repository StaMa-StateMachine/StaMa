<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>State Configurations</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="badfe5ab-643a-45d2-bd27-ad6536a62b6c" /><meta name="Description" content="Explains what a T:StaMa.StateConfiguration is and where it is used." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">StaMa - State Machine Controller Library 2.3.1.7 - Developers Guide and Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="StaMa - State Machine Controller Library 2.3.1.7 - Developers Guide and Reference" tocid="roottoc">StaMa - State Machine Controller Library 2.3.1.7 - Developers Guide and Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Developer's Guide" tocid="6dad403a-113f-424a-be34-3d70095dbd83">Developer's Guide</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm" title="Programming State Machines" tocid="298801d3-40ad-4fae-816e-5a7e1afb0ff0">Programming State Machines</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="954456b3-e05a-4e1d-af00-4f400fd43f47.htm" title="States, Transitions and Regions" tocid="954456b3-e05a-4e1d-af00-4f400fd43f47">States, Transitions and Regions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="16986707-6029-42de-a453-8b359b07248a.htm" title="StateMachineTemplate and StateMachine" tocid="16986707-6029-42de-a453-8b359b07248a">StateMachineTemplate and StateMachine</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="182b6093-fb30-4549-90d3-addc7c2dd2fb.htm" title="Composite States" tocid="182b6093-fb30-4549-90d3-addc7c2dd2fb">Composite States</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7e6981a4-284a-4027-9e21-50d195fe0169.htm" title="Orthogonal Regions" tocid="7e6981a4-284a-4027-9e21-50d195fe0169">Orthogonal Regions</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="badfe5ab-643a-45d2-bd27-ad6536a62b6c.htm" title="State Configurations" tocid="badfe5ab-643a-45d2-bd27-ad6536a62b6c">State Configurations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="93712910-2b27-4731-a3a5-38da29702b5e.htm" title="State Machine Entities and Relations" tocid="93712910-2b27-4731-a3a5-38da29702b5e">State Machine Entities and Relations</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="StaMa" src="../icons/StaMa32x32.png" /></td><td class="titleColumn">State Configurations</td></tr></table><span class="introStyle"></span><div class="summary"><p>Explains what a <a href="T_StaMa_StateConfiguration.htm">StateConfiguration</a> is and where it is used.</p></div><div class="introduction"><p>
        Describing the active state of a plain state machine is simple: A reference to a single state is sufficient.
        Source and target states of transitions in a plain state machine can simply be addressed through references to single states.
        Also the active state in a hierarchical state machine is sufficiently defined through the ultimate leaf simple state, regardless of nesting depth.
        Transitions starting or ending at a composite state can be described through the reference to the composite state.
      </p><p>
        Things start to become more complex with orthogonal sub-states:
      </p><p>
        Defining the active state in the presence of orthogonal sub-regions requires references to multiple states in case the state machine is in the orthogonal sub-states.
        The same applies for transition source and target states.
        While it would be possible to handle active states and transition source and target states as a simple array of state references, it turns out that this is
        computationally inefficient when questions have to be answered like these:
      </p><ul><li><p>
            Is a set of states really valid, which means are the referenced states really in separate orthogonal sub-regions?
          </p></li><li><p>
            What is the common region between the source and target of a transition, i.e. the tree node up to which exit actions and from which entry actions have to be executed in case the transition is executed?
          </p></li><li><p>
            Is the active state identical to (or is it a sub-state of) a particular transition's source state? The answer of this question is needed to identify the reached transitions, and it is particular complex to answer in case of a partially defined source state of a join transition.
          </p></li></ul><p>
        This is where the <a href="T_StaMa_StateConfiguration.htm">StaMa.StateConfiguration</a> type helps.
        <a href="T_StaMa_StateConfiguration.htm">StateConfiguration</a> instances are used to keep the <a href="P_StaMa_StateMachine_ActiveStateConfiguration.htm">active state</a> of a <a href="T_StaMa_StateMachine.htm">StateMachine</a> and
        for the <a href="P_StaMa_Transition_SourceState.htm">SourceState</a> and <a href="P_StaMa_Transition_TargetState.htm">TargetState</a> properties of <a href="T_StaMa_Transition.htm">Transition</a>s.
      </p><p>
        For the client code there is usually no need to explicitly create <a href="T_StaMa_StateConfiguration.htm">StateConfiguration</a> instances, as the <a href="Overload_StaMa_StateMachineTemplate_Transition.htm">StateMachineTemplate.Transition</a> statement accepts arrays of state names for defining the source and target states of fork and join <a href="T_StaMa_Transition.htm">Transition</a>s.
        For special cases <a href="T_StaMa_StateConfiguration.htm">StateConfiguration</a> instances can be created through the <a href="Overload_StaMa_StateMachineTemplate_CreateStateConfiguration.htm">StateMachineTemplate.CreateStateConfiguration</a> method, if needed.
      </p><p>
        The <a href="T_StaMa_StateConfiguration.htm">StateConfiguration</a> for the <a href="P_StaMa_StateMachine_ActiveStateConfiguration.htm">active state</a> property is managed internally.
      </p><p>
        In order to get a human readable format for tracing or debugging, the <a href="M_StaMa_StateConfiguration_ToString.htm">StateConfiguration.ToString</a> method returns the referenced state name or state names concatenated into a single <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>.
        See <a href="M_StaMa_StateConfiguration_ToString.htm">StateConfiguration.ToString</a> for details of the format.
      </p></div><div class="collapsibleAreaRegion" id="StateConfigurationVisitor"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a Customized Human Readable Format for a StateConfiguration Instance</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The built-in <a href="M_StaMa_StateConfiguration_ToString.htm">StateConfiguration.ToString</a> method traverses the state machine structure and collects all state names in a <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> with some
          structure formatting characters like <span class="code">'('</span>, <span class="code">')'</span>, <span class="code">','</span> and <span class="code">'*'</span> by utilizing the <a href="M_StaMa_StateConfiguration_PassThrough.htm">StateConfiguration.PassThrough</a> method.
        </p><p>
          The following code shows how to implement an individual formatting method.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">IStateConfigurationVisitor implementation</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> StateConfigurationUtils
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> Format(StateConfiguration stateConfiguration)
    {
        StateConfigurationWriter writer = <span class="highlight-keyword">new</span> StateConfigurationWriter();
        stateConfiguration.PassThrough(writer);
        <span class="highlight-keyword">return</span> writer.ToString();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">class</span> StateConfigurationWriter : IStateConfigurationVisitor
    {
        System.Text.StringBuilder text = <span class="highlight-keyword">new</span> System.Text.StringBuilder(<span class="highlight-number">256</span>);

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> ToString()
        {
            <span class="highlight-keyword">return</span> text.ToString();
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> State(State state)
        {
            text.Append(state.Name);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> StateAny()
        {
            text.Append(<span class="highlight-literal">"*"</span>);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> BeginSubStates()
        {
            text.Append(<span class="highlight-literal">"("</span>);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> EndSubStates()
        {
            text.Append(<span class="highlight-literal">")"</span>);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> NextSubState()
        {
            text.Append(<span class="highlight-literal">","</span>);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter">Documentation generated on 22-Apr-2016  <p><a href="https://github.com/StaMa-StateMachine/StaMa/issues" target="_blank">Report issues at https://github.com/StaMa-StateMachine/StaMa/</a></p></div></body></html>