<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>States, Transitions and Regions</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="954456b3-e05a-4e1d-af00-4f400fd43f47" /><meta name="Description" content="Describes how to define the states and transitions for a basic state machine and what a region is." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference" tocid="roottoc">StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Developer's Guide" tocid="7953145f-79aa-45fb-af3b-94cc26ebf94e">Developer's Guide</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm" title="Programming State Machines" tocid="298801d3-40ad-4fae-816e-5a7e1afb0ff0">Programming State Machines</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="954456b3-e05a-4e1d-af00-4f400fd43f47.htm" title="States, Transitions and Regions" tocid="954456b3-e05a-4e1d-af00-4f400fd43f47">States, Transitions and Regions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="16986707-6029-42de-a453-8b359b07248a.htm" title="StateMachineTemplate and StateMachine" tocid="16986707-6029-42de-a453-8b359b07248a">StateMachineTemplate and StateMachine</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="182b6093-fb30-4549-90d3-addc7c2dd2fb.htm" title="Composite States" tocid="182b6093-fb30-4549-90d3-addc7c2dd2fb">Composite States</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7e6981a4-284a-4027-9e21-50d195fe0169.htm" title="Orthogonal Regions" tocid="7e6981a4-284a-4027-9e21-50d195fe0169">Orthogonal Regions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="badfe5ab-643a-45d2-bd27-ad6536a62b6c.htm" title="State Configurations" tocid="badfe5ab-643a-45d2-bd27-ad6536a62b6c">State Configurations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="93712910-2b27-4731-a3a5-38da29702b5e.htm" title="State Machine Entities and Relations" tocid="93712910-2b27-4731-a3a5-38da29702b5e">State Machine Entities and Relations</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="StaMa" src="../icons/StaMa32x32.png" /></td><td class="titleColumn">States, Transitions and Regions</td></tr></table><span class="introStyle"></span><div class="summary"><p>Describes how to define the states and transitions for a basic state machine and what a region is.</p></div><div class="introduction"><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> represents the structure of a state machine through a tree structure of <a href="T_StaMa_Region.htm">Region</a>, <a href="T_StaMa_State.htm">State</a> and
        <a href="T_StaMa_Transition.htm">Transition</a> instances, each instance represents a node in the tree.
      </p><p>
        The purpose of state and transition instances is fairly obvious.
      </p><p>
        The concept of regions is not immediately apparent from the state diagram:
        A <a href="T_StaMa_Region.htm">Region</a> instance is the container for states.
        The rule of thumb is, that a <a href="T_StaMa_Region.htm">Region</a> instance is always involved when the state machine diagram defines an initial state.
        Accordingly <a href="T_StaMa_Region.htm">Region</a> instances are needed for top level states, for the sub-states of a <a href="182b6093-fb30-4549-90d3-addc7c2dd2fb.htm">composite state</a> and for every <a href="7e6981a4-284a-4027-9e21-50d195fe0169.htm">orthogonal sub-region</a>.
        Composite states and orthogonal regions are explained later.
      </p><p>
        The tree structure is aggregated at the <a href="T_StaMa_StateMachineTemplate.htm">StateMachineTemplate</a> instance through the <a href="P_StaMa_StateMachineTemplate_Root.htm">StateMachineTemplate.Root</a> property.
        The <a href="T_StaMa_Region.htm">Region</a>, <a href="T_StaMa_State.htm">State</a> and
        <a href="T_StaMa_Transition.htm">Transition</a> tree nodes are created through the factory methods
        <a href="M_StaMa_StateMachineTemplate_Region.htm">Region</a>,
        <a href="Overload_StaMa_StateMachineTemplate_State.htm">State</a> and
        <a href="Overload_StaMa_StateMachineTemplate_Transition.htm">Transition</a>
        of the <a href="T_StaMa_StateMachineTemplate.htm">StateMachineTemplate</a> instance.
      </p><p>
        For a simple two state diagram with transitions between the states as in <em>Figure 1</em> the corresponding tree structure can be created as shown in the subsequent code chunk.
      </p><div class="mediaCenter"><img alt="State Machine Concepts Simple State Machine" src="../media/StateMachineConceptsSimpleStateMachine.png" /><div class="caption"><span class="captionLead">Figure 1:
						</span>Simple state machine diagram with two states and transitions.</div></div><div class="mediaCenter"><img alt="State Machine Concepts Simple State Machine Tree" src="../media/StateMachineConceptsSimpleStateMachineTree.png" /><div class="caption"><span class="captionLead">Figure 2:
						</span>Tree structure for the above simple state machine.</div></div><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFCAAA_tab1" class="codeSnippetContainerTabSingle">StateMachineTemplate creation code for the simple state machine</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFCAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFCAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFCAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">StateMachineTemplate t = <span class="highlight-keyword">new</span> StateMachineTemplate();
t.Region(<span class="highlight-literal">"State1"</span>, <span class="highlight-keyword">false</span>);
    t.State(<span class="highlight-literal">"State1"</span>, <span class="highlight-keyword">null</span>, ExitState1);
        t.Transition(<span class="highlight-literal">"Transit1"</span>, <span class="highlight-literal">"State2"</span>, <span class="highlight-literal">"Event1"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
    t.State(<span class="highlight-literal">"State2"</span>, EnterState2, <span class="highlight-keyword">null</span>);
        t.Transition(<span class="highlight-literal">"Transit2"</span>, <span class="highlight-literal">"State1"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
t.EndRegion();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFCAAA");</script><p>
        Writing the <a href="M_StaMa_StateMachineTemplate_Region.htm">Region</a>,
        <a href="M_StaMa_StateMachineTemplate_EndRegion.htm">EndRegion</a>,
        <a href="Overload_StaMa_StateMachineTemplate_State.htm">State</a>,
        <a href="M_StaMa_StateMachineTemplate_EndState.htm">EndState</a>
        and <a href="Overload_StaMa_StateMachineTemplate_Transition.htm">Transition</a> statements in this way yields a domain specific language for state machines.
        Nested tree nodes enclosed within a <span class="placeholder">Node</span>...End<span class="placeholder">Node</span> scope are automatically linked as childs of the enclosing tree node.
      </p><p>
        The recommended indentation improves the visualization of the tree structure and helps reading the code.
      </p><p>
        The closing <a href="M_StaMa_StateMachineTemplate_EndRegion.htm">EndRegion</a> statement (for every <a href="M_StaMa_StateMachineTemplate_Region.htm">Region</a> statement) and
        <a href="M_StaMa_StateMachineTemplate_EndState.htm">EndState</a> statement (for every <a href="Overload_StaMa_StateMachineTemplate_State.htm">State</a> statement) indicates that the sub-structure of the corresponding tree node has been completed.
        For regions the <a href="M_StaMa_StateMachineTemplate_EndRegion.htm">EndRegion</a> statement indicates that all states have been specified.
        For states the <a href="M_StaMa_StateMachineTemplate_EndState.htm">EndState</a> statement indicates that all transitions and all orthogonal sub-regions have been specified.
      </p><p>
        Execution of the final (balanced) <a href="M_StaMa_StateMachineTemplate_EndRegion.htm">EndRegion</a> statement assigns the <a href="P_StaMa_StateMachineTemplate_Root.htm">StateMachineTemplate.Root</a> property
        and starts a syntactic check that all referenced state names are existing and unique, that the region initial states are part of the region, that the transition source states and target states are valid and other syntactic conditions.
        If there are syntactic errors, a <a href="T_StaMa_StateMachineException.htm">StateMachineException</a> is thrown with a <a href="http://msdn2.microsoft.com/en-us/library/9btwf6wk" target="_blank">Message</a> that explains the error.
        The <a href="T_StaMa_Region.htm">Region</a>, <a href="T_StaMa_State.htm">State</a> and
        <a href="T_StaMa_Transition.htm">Transition</a> instances are immutable after the final <a href="M_StaMa_StateMachineTemplate_EndRegion.htm">EndRegion</a> statement.
      </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
          The <a href="http://www.omg.org/spec/UML/2.5/Beta2/PDF/" target="_blank">OMG UML Specification</a> suggests that transitions shall be owned by the region that contains the transition.
        </p><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> aggregates transitions at the state where the transition starts. This choice is natural as it easily allows to find all reached candidate transitions for the active state of the state machine.
        </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="TransitionPriority"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Transition Priority</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Multiple transitions may start from the same state.
          These are added through a sequence of <a href="Overload_StaMa_StateMachineTemplate_Transition.htm">Transition</a> statements
          after the <a href="Overload_StaMa_StateMachineTemplate_State.htm">State</a> statement.
        </p><p>
          Of course only a single transition can execute at one time.
          In case multiple transitions of this group are eligible to be executed at the same time, the first one as appearing in the code is executed.
        </p><p>
          The below sample state diagram shows a state with three transitions that would be triggered through the same signal.
        </p><div class="mediaCenter"><img alt="Transition Knot Shape Priorities" src="../media/TransitionKnotShapePriorities.png" /><div class="caption"><span class="captionLead">Figure 3:
						</span>Multiple transitions starting from the same state.</div></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The <a href="http://www.omg.org/spec/UML/2.5/Beta2/PDF/" target="_blank">OMG UML Specification</a> doesn't define a precedence for transitions.
          </p><p>
            In a state diagram this precedence (or priority) could be clarified by adorning each transition with a priority number.
            <a href="ca217c97-dd3c-4c6c-a0e7-5893315663aa.htm">StaMa Visio Shapes</a> provide a priority property for transitions that defines the order in which the transitions are generated.
          </p></td></tr></table></div><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABABAAA_tab1" class="codeSnippetContainerTabSingle">StateMachineTemplate creation code for multiple transitions</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">StateMachineTemplate t = <span class="highlight-keyword">new</span> StateMachineTemplate();
t.Region(<span class="highlight-literal">"State1"</span>, <span class="highlight-keyword">false</span>);
    t.State(<span class="highlight-literal">"State1"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
        t.Transition(<span class="highlight-literal">"Transit1"</span>, <span class="highlight-literal">"State2"</span>, <span class="highlight-literal">"Event"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
        t.Transition(<span class="highlight-literal">"Transit2"</span>, <span class="highlight-literal">"State3"</span>, <span class="highlight-literal">"Event"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
        t.Transition(<span class="highlight-literal">"Transit3"</span>, <span class="highlight-literal">"State4"</span>, <span class="highlight-literal">"Event"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
    t.State(<span class="highlight-literal">"State2"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
    t.State(<span class="highlight-literal">"State3"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
    t.State(<span class="highlight-literal">"State4"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);
    t.EndState();
t.EndRegion();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABAAA");</script><p>
          In the above sample the transition named "Transit1" will execute when calling the <a href="Overload_StaMa_StateMachine_SendTriggerEvent.htm">StateMachine.SendTriggerEvent</a> method with the <span class="code">triggerEvent</span> parameter set to <span class="code">"Event"</span>.
        </p></div></div></div><div id="pageFooter" class="pageFooter">Documentation generated on 22-Apr-2016  <p><a href="https://github.com/StaMa-StateMachine/StaMa/issues" target="_blank">Report issues at https://github.com/StaMa-StateMachine/StaMa/</a></p></div></body></html>