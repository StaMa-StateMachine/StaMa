<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Welcome</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="d3287120-e3fa-45ed-8986-ba6d78244c1c" /><meta name="Description" content="Welcome to the StaMa State Machine Controller Library https://StaMa-StateMachine.github.io/ ." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference" tocid="roottoc">StaMa - State Machine Controller Library 2.3.0.3 - Developers Guide and Reference</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Developer's Guide" tocid="7953145f-79aa-45fb-af3b-94cc26ebf94e">Developer's Guide</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Welcome" tocid="d3287120-e3fa-45ed-8986-ba6d78244c1c">Welcome</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="04562727-a5a7-4eda-b96a-44800a77bc7e.htm" title="License and Copyright" tocid="04562727-a5a7-4eda-b96a-44800a77bc7e">License and Copyright</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="003c5297-0c49-41e9-ac8b-9f603358ac66.htm" title="Getting Started" tocid="003c5297-0c49-41e9-ac8b-9f603358ac66">Getting Started</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm" title="Programming State Machines" tocid="298801d3-40ad-4fae-816e-5a7e1afb0ff0">Programming State Machines</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ae34a73e-1561-4b10-ab33-a7564f4026e7.htm" title="Integrating the State Machine with the Application" tocid="ae34a73e-1561-4b10-ab33-a7564f4026e7">Integrating the State Machine with the Application</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c9aa27b0-4173-4bcb-a275-908a0d0f8070.htm" title="Samples" tocid="c9aa27b0-4173-4bcb-a275-908a0d0f8070">Samples</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ca217c97-dd3c-4c6c-a0e7-5893315663aa.htm" title="Using Visio Shapes" tocid="ca217c97-dd3c-4c6c-a0e7-5893315663aa">Using Visio Shapes</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="497592ea-471d-422b-b7fc-eff4b705ac37.htm" title="Glossary" tocid="497592ea-471d-422b-b7fc-eff4b705ac37">Glossary</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="StaMa" src="../icons/StaMa32x32.png" /></td><td class="titleColumn">Welcome</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Welcome to the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa State Machine Controller Library</a>.
      </p></div><div class="collapsibleAreaRegion" id="AboutStaMa"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />About the StaMa State Machine Controller Library</span></div><div id="ID1RBSection" class="collapsibleSection"><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> provides an execution algorithm for state machines.
          Advanced state machine concepts like <span class="term">composite state</span>, <span class="term">orthogonal sub-region</span>, <span class="term">fork transition</span>, <span class="term">join transition</span> and <span class="term">history state</span> are supported.
        </p><p>
          Using <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> a state machine is created by setting up a structure of <span class="term">state</span>, <span class="term">transition</span> and <span class="term">region</span> objects in a compact chunk of code using C#.
          The structure directly reflects the tree structure of the state machine diagram.
          Translating a <a href="http://en.wikipedia.org/wiki/UML_state_machine" target="_blank">UML state machine diagram</a> into <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> state, transition and region objects is straightforward.
        </p><p>
          Based on the <a href="http://office.microsoft.com/visio/" target="_blank">Microsoft Visio</a> drawing application the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa State Machine Controller Library</a> additionally provides a set of prepared graphic objects (<span class="term">shapes</span>) to draw state machine diagrams in <a href="http://office.microsoft.com/visio/" target="_blank">Microsoft Visio</a> and generate the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> related C# code from it.
          The code generator requires the <a href="http://office.microsoft.com/visio/" target="_blank">Microsoft Visio</a> 32-bit version (<a href="ca217c97-dd3c-4c6c-a0e7-5893315663aa.htm#Visio32bitLimitation">more info</a>).
        </p><p>
          Particular attention has been given to the aspect that <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> shall not use any operating system functionality like threads, timers, locks and other synchronisation mechanisms.
          This enhances the use of the library in a broad range of projects with an existing threading, synchronization and tracing infrastructure.
        </p><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> is available as a <a href="https://www.nuget.org/" target="_blank">NuGet</a> package, see <a href="e33381e0-fa7d-494b-ba46-f728e47edec7.htm">Installing StaMa on a Developer Machine</a> for details.
        </p><p>
          The following sample diagram and code shows how to setup the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> state machine structure for a diagram and how to send events to the state machine to trigger the execution of transitions.
        </p><div class="mediaCenter"><img alt="Welcome Sample" src="../media/WelcomeSample.png" /><div class="caption"><span class="captionLead">Figure 1:
						</span>Disk player controller</div></div><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAEAAA_tab1" class="codeSnippetContainerTabSingle">WelcomeSample.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> StaMa;

<span class="highlight-keyword">class</span> Program
{
    <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
    {
        StateMachineTemplate t = <span class="highlight-keyword">new</span> StateMachineTemplate();
        t.Region(<span class="highlight-literal">"Stopped"</span>, <span class="highlight-keyword">false</span>);
            t.State(<span class="highlight-literal">"Stopped"</span>);
                t.Transition(<span class="highlight-literal">"T1"</span>, <span class="highlight-literal">"Running"</span>, <span class="highlight-literal">"Play"</span>);
            t.EndState();
            t.State(<span class="highlight-literal">"Loaded"</span>, StartMotor, StopMotor);
                t.Transition(<span class="highlight-literal">"T2"</span>, <span class="highlight-literal">"Stopped"</span>, <span class="highlight-literal">"Stop"</span>);
                t.Region(<span class="highlight-literal">"Running"</span>, <span class="highlight-keyword">false</span>);
                    t.State(<span class="highlight-literal">"Running"</span>, EngageHead, ReleaseHead);
                        t.Transition(<span class="highlight-literal">"T3"</span>, <span class="highlight-literal">"Paused"</span>, <span class="highlight-literal">"Pause"</span>);
                    t.EndState();
                    t.State(<span class="highlight-literal">"Paused"</span>);
                        t.Transition(<span class="highlight-literal">"T4"</span>, <span class="highlight-literal">"Running"</span>, <span class="highlight-literal">"Play"</span>);
                    t.EndState();
                t.EndRegion();
            t.EndState();
        t.EndRegion();

        StateMachine stateMachine = t.CreateStateMachine();

        stateMachine.Startup();
        stateMachine.SendTriggerEvent(<span class="highlight-literal">"Play"</span>);
        stateMachine.SendTriggerEvent(<span class="highlight-literal">"Pause"</span>);
        stateMachine.SendTriggerEvent(<span class="highlight-literal">"Stop"</span>);
        stateMachine.Finish();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> StartMotor(StateMachine stateMachine, <span class="highlight-keyword">object</span> triggerEvent, EventArgs eventArgs)
    {
        System.Console.WriteLine(<span class="highlight-literal">"StartMotor"</span>);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> StopMotor(StateMachine stateMachine, <span class="highlight-keyword">object</span> triggerEvent, EventArgs eventArgs)
    {
        System.Console.WriteLine(<span class="highlight-literal">"StopMotor"</span>);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> EngageHead(StateMachine stateMachine, <span class="highlight-keyword">object</span> triggerEvent, EventArgs eventArgs)
    {
        System.Console.WriteLine(<span class="highlight-literal">"EngageHead"</span>);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> ReleaseHead(StateMachine stateMachine, <span class="highlight-keyword">object</span> triggerEvent, EventArgs eventArgs)
    {
        System.Console.WriteLine(<span class="highlight-literal">"ReleaseHead"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEAAA");</script><p>
          The <span class="code">"Play"</span>, <span class="code">"Pause"</span> or <span class="code">"Stop"</span> events trigger the execution of transitions and
          as a result the <span class="term">exit actions</span> and <span class="term">entry actions</span> <span class="code">StartMotor</span>, <span class="code">StopMotor</span>, <span class="code">EngageHead</span> and <span class="code">ReleaseHead</span> of the involved states.
        </p><p>
          One or more state machine instances may be created from the same immutable state machine template structure in order to economize resources.
        </p></div><div class="collapsibleAreaRegion" id="OlderVersions"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Older Versions</span></div><div id="ID2RBSection" class="collapsibleSection"><p><a href="http://www.7fun.de/StaMa/" target="_blank">Online Help V2.3.0.2 (forwarded from StaMa.org)</a></p><p><a href="http://www.7fun.de/StaMa/V2202/" target="_blank">Online Help V2.2.0.2 (forwarded from StaMa.org)</a></p><p><a href="http://stama.codeplex.com/" target="_blank">Source Code V2.2.0.2 and V2.3.0.2 (on CodePlex)</a></p></div><div class="collapsibleAreaRegion" id="AboutDocument"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />About this document</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          This helpfile contains information about how to use the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa State Machine Controller Library</a>.
        </p><p>
          It is not intended to be a general introduction to state machine modelling.
        </p><p>
          The main parts are
        </p><ul><li><p><a href="003c5297-0c49-41e9-ac8b-9f603358ac66.htm">Getting Started</a>: How to deploy <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> for the different target environments.
            </p></li><li><p><a href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm">Programming State Machines</a>: How to use <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> to implement basic and advanced state machine concepts like <span class="term">composite state</span>, <span class="term">orthogonal sub-region</span>, <span class="term">fork transition</span>, <span class="term">join transition</span> and <span class="term">history state</span>.
            </p></li><li><p><a href="c9aa27b0-4173-4bcb-a275-908a0d0f8070.htm">Samples</a>: Explanations for the samples in the package.
            </p></li><li><p><a href="ca217c97-dd3c-4c6c-a0e7-5893315663aa.htm">Using Visio Shapes</a>: How to use the attached <a href="http://office.microsoft.com/visio/" target="_blank">Microsoft Visio</a> <span class="term">shapes</span> to draw a state machine diagram and generate the state machine code from the drawing.
            </p></li></ul></div><div class="collapsibleAreaRegion" id="AboutAuthor"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />About the author</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Not really about me but about my point of view:
        </p><p>
          Within the many years of my professional life as an application and system developer I was exposed to only a moderate number of components where a state machine approach seemed to be reasonable.
          If however the problem is suitable, the state machine approach can unfold its power and yields a software implementation with unequaled robustness,
          predictability of behavior and ability to analyse the behavior.
        </p><p>
          It seems that the real complexity of software components with dynamic behavior is often understood very late during software development process.
          Sometimes only after the code has been completed and behavior is somewhat settled but leaves some bugs or unexpected behavior.
          Availability of an established state machine execution engine might encourage developers to take the step and design the component to use the state machine approach.
        </p><p>
          A graphical representation of the state machine is essential for efficient communication and understanding of the software.
          The state machine diagram is the street map of the behavior, without it the developer is lost in the urban canyons of the code.
          Needless to say that the graphical representation must be in sync with the implementation at any time.
          This can easiest be achieved by generating the code from the graphical representation.
          Round trip or reverse generation of the graphical representation from the code turned out to be unsatisfactory.
        </p></div></div></div><div id="pageFooter" class="pageFooter">Documentation generated on 22-Apr-2016  <p><a href="https://github.com/StaMa-StateMachine/StaMa/issues" target="_blank">Report issues at https://github.com/StaMa-StateMachine/StaMa/</a></p></div></body><script type="text/javascript">
<!--
    var tocNav = document.getElementById("tocNav");
    var anchor = tocNav.children[0].children[0];
    Toggle(anchor);
    tocNav.children[0].className += " current";
-->
</script>
</html>