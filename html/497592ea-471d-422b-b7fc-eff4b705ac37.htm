<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Glossary</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="497592ea-471d-422b-b7fc-eff4b705ac37" /><meta name="Description" content="Every state of a state machine is contained in a region. For a plain state machine with only simple states there is one root region that contains all the states." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">StaMa - State Machine Controller Library 2.3.0.9 - Developers Guide and Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="StaMa - State Machine Controller Library 2.3.0.9 - Developers Guide and Reference" tocid="roottoc">StaMa - State Machine Controller Library 2.3.0.9 - Developers Guide and Reference</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Developer's Guide" tocid="e7c73e28-6895-434e-8239-2a4d98590529">Developer's Guide</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Welcome" tocid="d3287120-e3fa-45ed-8986-ba6d78244c1c">Welcome</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="04562727-a5a7-4eda-b96a-44800a77bc7e.htm" title="License and Copyright" tocid="04562727-a5a7-4eda-b96a-44800a77bc7e">License and Copyright</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="003c5297-0c49-41e9-ac8b-9f603358ac66.htm" title="Getting Started" tocid="003c5297-0c49-41e9-ac8b-9f603358ac66">Getting Started</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm" title="Programming State Machines" tocid="298801d3-40ad-4fae-816e-5a7e1afb0ff0">Programming State Machines</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ae34a73e-1561-4b10-ab33-a7564f4026e7.htm" title="Integrating the State Machine with the Application" tocid="ae34a73e-1561-4b10-ab33-a7564f4026e7">Integrating the State Machine with the Application</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="c9aa27b0-4173-4bcb-a275-908a0d0f8070.htm" title="Samples" tocid="c9aa27b0-4173-4bcb-a275-908a0d0f8070">Samples</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ca217c97-dd3c-4c6c-a0e7-5893315663aa.htm" title="Using Visio Shapes" tocid="ca217c97-dd3c-4c6c-a0e7-5893315663aa">Using Visio Shapes</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="497592ea-471d-422b-b7fc-eff4b705ac37.htm" title="Glossary" tocid="497592ea-471d-422b-b7fc-eff4b705ac37">Glossary</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="StaMa" src="../icons/StaMa32x32.png" /></td><td class="titleColumn">Glossary</td></tr></table><span class="introStyle"></span><br /><div class="glossaryLetterBar"><a href="#A">A</a> | <span class="nolink">B</span> | <a href="#C">C</a> | <span class="nolink">D</span> | <a href="#E">E</a> | <span class="nolink">F</span> | <span class="nolink">G</span> | <a href="#H">H</a> | <a href="#I">I</a> | <span class="nolink">J</span> | <span class="nolink">K</span> | <a href="#L">L</a> | <span class="nolink">M</span> | <span class="nolink">N</span> | <a href="#O">O</a> | <span class="nolink">P</span> | <span class="nolink">Q</span> | <a href="#R">R</a> | <a href="#S">S</a> | <a href="#T">T</a> | <span class="nolink">U</span> | <span class="nolink">V</span> | <span class="nolink">W</span> | <span class="nolink">X</span> | <span class="nolink">Y</span> | <span class="nolink">Z</span></div><br /><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="A">A</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="ActiveState">active state</span></dt><dd class="glossaryEntry"><p>
            The active state is the state or state configuration in which the state machine is.
            </p><div class="relatedEntry">See Also: 

					<a href="#StateConfiguration">state configuration</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="C">C</h3><dl class="glossaryGroupList"><dt class="glossaryEntry">composite state</dt><dd class="glossaryEntry"><div class="relatedEntry">See Also: 

					<a href="#HierarchicalState">hierarchical state</a></div></dd><dt class="glossaryEntry">concurrent state</dt><dd class="glossaryEntry"><div class="relatedEntry">See Also: 

					<a href="#OrthogonalState">orthogonal state</a></div></dd><dt class="glossaryEntry"><span id="TransitionConflict">Conflicting transitions</span></dt><dd class="glossaryEntry"><p>
            Transition are said to be in conflict, if more than one transition is enabled during dispatch of an event.
            Rules to solve the conflict are:
            </p><ol><li><p>
                    If they are in a hierarchical relationship, the outermost transition has precendence over the others.
                    </p></li><li><p>
                    If they emanate from the same state, there is a priority number that defines the precedence.
                    </p></li><li><p>
                    If they are part of orthogonal sub-regions, all will be executed according to the sub-region execution order.
                    </p></li></ol><div class="relatedEntry">See Also: 

					<a href="#Transition">Transition</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="E">E</h3><dl class="glossaryGroupList"><dt class="glossaryEntry">Enabled transition</dt><dd class="glossaryEntry"><p>
            A transition is said to be enabled during dispatch of an event if
            (1) the transitions source state configuration matches the state machine active state configuration, if
            (2) the current trigger event matches the transitions signal event and if
            (3) the guard condition is true.
            Multiple transitions may be enabled during a dispatch which is called conflicting transitions.
            </p><div class="relatedEntry">See Also: 

					<a href="#Transition">Transition</a>, <a href="#TransitionConflict">Conflicting transitions</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="H">H</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="HierarchicalState">hierarchical state</span></dt><dd class="glossaryEntry"><p>
            Hierarchical states are states that have at least one nested region with sub-states.
            </p></dd><dt class="glossaryEntry">history state</dt><dd class="glossaryEntry"><p>
              A sub-region may be configured to remember the state that is active when the region is left.
              This state will be re-entered when the region is entered again without a specified state.
            </p><div class="relatedEntry">See Also: 

					<a href="#Region">region</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="I">I</h3><dl class="glossaryGroupList"><dt class="glossaryEntry">initial state</dt><dd class="glossaryEntry"><p>
              Every region has one initial state that is entered when the region is entered without a specified state.
              This is the case for the root region when the state machine is started.
              Sub-regions are entered without a specified state when a transition is executed that ends at the outer border of the embedding composite state.
              The history state, if configured, replaces the initial state on second entry of the region.
            </p><div class="relatedEntry">See Also: 

					<a href="#Region">region</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="L">L</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="LCA">least common ancestor of a transition</span></dt><dd class="glossaryEntry"><p>
              The least common ancestor is the smallest region that contains both the transition anchor state and the transition target.
              When a transition is executed, it leaves (nested) states up to the state that is a direct child of the least common ancestor region and enters (nested) states starting from the child state of the least common ancestor region.
            </p><div class="relatedEntry">See Also: 

					<a href="#Transition">Transition</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="O">O</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="OrthogonalState">orthogonal state</span></dt><dd class="glossaryEntry"><p>Orthogonal states are states which are active at the same time within a single state machine.
            Orthogonal states are part of separate sibling regions.
            They are said to be orthogonal because the other states within the respective regions can be varied independently and thus span orthogonal state spaces.</p></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="R">R</h3><dl class="glossaryGroupList"><dt class="glossaryEntry">Reached transition</dt><dd class="glossaryEntry"><p>
            A transition is said to be reached when the the transitions source state configuration matches the state machine active state configuration.
            The transition will be evaluated on the next dispatch of an event.
            </p><div class="relatedEntry">See Also: 

					<a href="#Transition">Transition</a></div></dd><dt class="glossaryEntry"><span id="Region">region</span></dt><dd class="glossaryEntry"><p>
              Every state of a state machine is contained in a region.
              For a plain state machine with only simple states there is one root region that contains all the states.
              States of a hierarchical state machine contain one or more sub-regions that again contain states, which are called sub-states.
              Every region requires an initial state that indicates which state to enter when the region becomes active, for the root region this is the state machine startup.
              Nesting regions within states allows to create an arbitrary deep nested state machine.
              For details about the behavior of the state machine please see <a href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm">Programming State Machines</a>.
            </p></dd><dt class="glossaryEntry"><span id="RootRegion">root region</span></dt><dd class="glossaryEntry"><p>
              The root region is the topmost container for the states of a state machine and is needed for every state machine.
            </p><div class="relatedEntry">See Also: 

					<a href="#Region">region</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="S">S</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="StateConfiguration">state configuration</span></dt><dd class="glossaryEntry"><p>
            A state configuration describes the active state of a state machine, the source of a transition or the target of a transition.
            A state configuration can uniquely specify a single state (e.g. the active state of a state machine) or it can leave some degree of freedom through not specifying the states of one or more orthogonal sub-regions.
            </p><div class="relatedEntry">See Also: 

					<a href="#ActiveState">active state</a></div></dd><dt class="glossaryEntry">sub-state</dt><dd class="glossaryEntry"><p>
             A state nested within a sub-region of a composite state.
            </p><div class="relatedEntry">See Also: 

					<a href="#HierarchicalState">hierarchical state</a></div></dd></dl></div><div class="glossaryGroup"><h3 class="glossaryGroupHeading" id="T">T</h3><dl class="glossaryGroupList"><dt class="glossaryEntry"><span id="Transition">Transition</span></dt><dd class="glossaryEntry"><p /></dd><dt class="glossaryEntry"><span id="TransitionAnchor">transtion anchor</span></dt><dd class="glossaryEntry"><p>
             Transitions are aggregated at states.
             The transition anchor defines at which state a transition is aggregated.
             For plain transitions the transition anchor is identical with the transition source state.
             Complex transitions like join transitions have a transition anchor that is (typically) the common parent state of the source states.
             The transition anchor state is also the starting point for identifying the least common ancestor of the transition.
            </p><p>
             In some specific situations one or more source states may also be outside the closure of the transition anchor.
             The outside states are not left when the transition executes, however they still participate as a precondition for the transition to become enabled (state gated transition).
            </p><div class="relatedEntry">See Also: 

					<a href="#Transition">Transition</a></div></dd></dl></div></div></div><div id="pageFooter" class="pageFooter">Documentation generated on 22-Apr-2016  <p><a href="https://github.com/StaMa-StateMachine/StaMa/issues" target="_blank">Report issues at https://github.com/StaMa-StateMachine/StaMa/</a></p></div></body></html>