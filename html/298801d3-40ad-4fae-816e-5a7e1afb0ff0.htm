<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Programming State Machines</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="298801d3-40ad-4fae-816e-5a7e1afb0ff0" /><meta name="Description" content="Explains the functionality provided through the StaMa State Machine Controller Library https://StaMa-StateMachine.github.io/" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">StaMa - State Machine Controller Library 2.3.0.2 - Developers Guide and Reference<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="StaMa - State Machine Controller Library 2.3.0.2 - Developers Guide and Reference" tocid="roottoc">StaMa - State Machine Controller Library 2.3.0.2 - Developers Guide and Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d3287120-e3fa-45ed-8986-ba6d78244c1c.htm" title="Developer's Guide" tocid="2fe20d49-9cd6-4115-a896-1feb82560840">Developer's Guide</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm" title="Programming State Machines" tocid="298801d3-40ad-4fae-816e-5a7e1afb0ff0">Programming State Machines</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="954456b3-e05a-4e1d-af00-4f400fd43f47.htm" title="States, Transitions and Regions" tocid="954456b3-e05a-4e1d-af00-4f400fd43f47">States, Transitions and Regions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="16986707-6029-42de-a453-8b359b07248a.htm" title="StateMachineTemplate and StateMachine" tocid="16986707-6029-42de-a453-8b359b07248a">StateMachineTemplate and StateMachine</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="182b6093-fb30-4549-90d3-addc7c2dd2fb.htm" title="Composite States" tocid="182b6093-fb30-4549-90d3-addc7c2dd2fb">Composite States</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7e6981a4-284a-4027-9e21-50d195fe0169.htm" title="Orthogonal Regions" tocid="7e6981a4-284a-4027-9e21-50d195fe0169">Orthogonal Regions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="badfe5ab-643a-45d2-bd27-ad6536a62b6c.htm" title="State Configurations" tocid="badfe5ab-643a-45d2-bd27-ad6536a62b6c">State Configurations</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="93712910-2b27-4731-a3a5-38da29702b5e.htm" title="State Machine Entities and Relations" tocid="93712910-2b27-4731-a3a5-38da29702b5e">State Machine Entities and Relations</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="StaMa" src="../icons/StaMa32x32.png" /></td><td class="titleColumn">Programming State Machines</td></tr></table><span class="introStyle"></span><div class="summary"><p>
        Explains the functionality provided through the <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa State Machine Controller Library</a></p></div><div class="introduction"><p>
        The main conceptual reference for <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> is the state chart formalism as described by <a href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm#References">David Harel</a>.
        The <a href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm#References">OMG UML Specification</a> adopted these concepts and is the reference for the terminology used within <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a>.
      </p><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> provides a subset of the state chart features that seemed both essential and implementable with reasonable effort and complexity.
      </p><p>
        This section explains how to use <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> to implement basic state machines and state machines that use the advanced concepts of the state chart formalism.
      </p><p>
        Basically a state machine is composed of <span class="term">states</span> and <span class="term">transitions</span> between them.
        Transitions are triggered through events sent to the state machine.
        Whenever a transition executes, it will leave the current state and enter the target state of the transition,
        thereby executing (if present) an exit action of the state that is left, a transition specific action and an entry action of the state that is entered.
      </p><p>
        The following block diagram tries to visualize this.
      </p><div class="mediaCenter"><img alt="State Machine Algorithm" src="../media/StateMachineAlgorithm.png" /><div class="caption"><span class="captionLead">Figure 1:
						</span>The state machine algorithm</div></div><p>
        One of the fundamental achievements of the state chart formalism is, that it provides a visual notation for many aspects of a state machine that would otherwise only be part of the implementation code.
      </p><p>
        If the state machine behavior is defined through a state diagram, the first step for implementing the state machine is usually to transform the state diagram structure into code.
        <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> supports this by providing a set of methods that bridge the semantic gap between state diagram and implementation code.
      </p><p>
  	    The state diagram structure is an immutable description of the behavior of the state machine.
  	    The main changing entity of a state machine is the current active state.
        <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> separates the immutable state machine structure from the current active active state through the state machine instance concept.
        Events are delivered to the state machine instance and the state machine algorithm evaluates which actions are to be executed depending on the state machine structure and the current active state.
      </p><p>
        When an event is delivered to the state machine, the algorithm considers the current active state, checks the transitions outgoing from this state and eventually selects a transition that shall be executed.
        For this transition the system invokes the exit actions, invokes the transition action, changes the current state to the target state of the transition and invokes the entry action.
        This algorithm is the fundamental behavior of the state machine and is refined through concepts like composite states, orthogonal regions and fork and join transitions.
      </p><p>
        Even the simplest useful state machine has multiple states.
        States are always aggregated within a container named <span class="term">region</span> which also defines the initial state.
        Regions are also used to convey the concept of nesting states within composite states and the concept of orthogonal sub-regions as defined in the state chart formalism.
      </p><p>
        The following sub-sections explain the usage of the classes and methods of the <a href="N_StaMa.htm">StaMa</a> namespace in detail.
      </p></div><div class="collapsibleAreaRegion" id="BasicConcepts"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Basic Concepts</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          Understanding the following <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> concepts is necessary to implement a flat state machine.
        </p><ul><li><p><a href="954456b3-e05a-4e1d-af00-4f400fd43f47.htm">States, Transitions and Regions</a></p></li><li><p><a href="16986707-6029-42de-a453-8b359b07248a.htm">StateMachineTemplate and StateMachine</a></p></li></ul></div><div class="collapsibleAreaRegion" id="AdvancedConcepts"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Advanced Concepts</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The following <a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> concepts are needed to implement a state machine that utilizes composite states and/or orthogonal regions.
        </p><ul><li><p><a href="182b6093-fb30-4549-90d3-addc7c2dd2fb.htm">Composite States</a></p></li><li><p><a href="7e6981a4-284a-4027-9e21-50d195fe0169.htm">Orthogonal Regions</a></p></li><li><p><a href="badfe5ab-643a-45d2-bd27-ad6536a62b6c.htm">State Configurations</a></p></li></ul></div><div class="collapsibleAreaRegion" id="Other"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Other Hopefully Useful Stuff</span></div><div id="ID2RBSection" class="collapsibleSection"><ul><li><p><a href="93712910-2b27-4731-a3a5-38da29702b5e.htm">State Machine Entities and Relations</a></p></li></ul></div><div class="collapsibleAreaRegion" id="References"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />References</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          Below publications explain the general concepts of state machines.
        </p><ul><li><p>
              [1] <a href="http://www.omg.org/spec/UML/" target="_blank">OMG</a>,
              <a href="http://www.omg.org/spec/UML/2.5/Beta2/PDF" target="_blank">UML Specification 2.5 (ptc/2013-09-05)</a></p></li><li><p>
              [2] <a href="http://www.wisdom.weizmann.ac.il/~harel/" target="_blank">David Harel</a>,
              <a href="http://www.wisdom.weizmann.ac.il/~harel/SCANNED.PAPERS/SemanticsofStatecharts.pdf" target="_blank">The STATEMATE Semantics of Statecharts</a></p></li></ul></div><div class="collapsibleAreaRegion" id="ComparisonToStateDesignPattern"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Comparison to the state design pattern</span></div><div id="ID4RBSection" class="collapsibleSection"><p><a href="https://StaMa-StateMachine.github.io/" target="_blank">StaMa</a> is not based on the <a href="298801d3-40ad-4fae-816e-5a7e1afb0ff0.htm#References">state design pattern</a>.
          The original state design pattern provides a solution to modify the behavior of methods of an object.
          It does this by providing a rich interface at the "context" object and all polymorphic subclasses of the state class.
          The original state design pattern is often reduced to provide a single method that accepts an event and the state subclasses handle the event specific for the current state.
          The implementation spreads the structural information of the state diagram onto multiple classes which might be less maintainable and readable compared to a condensed code representation through a domain specific language.
          The state pattern doesn't provide a proposal how to provide the state chart formalism functionality.
        </p><p>
         See also <a href="http://en.wikipedia.org/wiki/State_pattern" target="_blank">State Pattern</a>,
         as described in Erich Gamma; Richard Helm, Ralph Johnson, John M. Vlissides <a href="http://dl.acm.org/citation.cfm?id=186897" target="_blank">Design Patterns: Elements of Reusable Object-Oriented Software</a></p></div></div></div><div id="pageFooter" class="pageFooter">Documentation generated on 28-Mrz-2016  <p><a href="https://github.com/StaMa-StateMachine/StaMa/issues" target="_blank">Report issues at https://github.com/StaMa-StateMachine/StaMa/</a></p></div></body></html>